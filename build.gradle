plugins {
    id 'java-library'
    id 'eclipse'
    id 'net.minecraftforge.gradleutils' version '2.+'
    id 'de.jjohannes.extra-java-module-info' version '0.11'
    id 'maven-publish'
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(16)
    withSourcesJar()
}


group = 'net.minecraftforge'
version = gradleutils.getTagOffsetVersion()
logger.lifecycle('Version: ' + version)

sourceSets {
    jmh
    testJars
}

repositories {
    mavenLocal()
    maven {
        name = 'forge'
        url = 'https://maven.minecraftforge.net/'
    }
}


dependencies {
    api("org.ow2.asm:asm:${asmVersion}")
    api("org.ow2.asm:asm-tree:${asmVersion}")
    api("org.ow2.asm:asm-commons:${asmVersion}")
    
    implementation('cpw.mods:securejarhandler:2.1.2')
    implementation('org.apache.logging.log4j:log4j-api:2.17.1')
    implementation('org.apache.logging.log4j:log4j-core:2.17.1')
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4')
    compileOnly('org.jetbrains:annotations:23.0.0')
    
    annotationProcessor('org.apache.logging.log4j:log4j-core:2.17.1')
    
    testCompileOnly(sourceSets.testJars.output)
    testCompileOnly('org.jetbrains:annotations:23.0.0')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.+')
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.8.+')
    testImplementation('org.powermock:powermock-core:2.0.+')
    testImplementation('org.powermock:powermock-reflect:2.0.+')
    testRuntimeOnly('org.apiguardian:apiguardian-api:1.1.2')

    jmhImplementation(sourceSets.main.output)
    jmhImplementation(sourceSets.testJars.output)
    jmhImplementation('org.openjdk.jmh:jmh-core:1.35')
    jmhImplementation('org.powermock:powermock-core:2.0.9')
    jmhAnnotationProcessor('org.openjdk.jmh:jmh-generator-annprocess:1.35')
}

configurations.jmhImplementation.extendsFrom(configurations.implementation)

extraJavaModuleInfo {
    failOnMissingModuleInfo = false
    
    automaticModule('jmh-core-1.35.jar', 'jmh.core')
    automaticModule('powermock-core-2.0.9.jar', 'powermock.core')
    automaticModule('powermock-reflect-2.0.9.jar', 'powermock.reflect')
    automaticModule('jopt-simple-5.0.4.jar', 'jopt.simple')
}

task testsJar(type: Jar) {
    archiveClassifier = 'testsjar'
    from sourceSets.testJars.output
}

test {
    dependsOn 'testsJar'
    
    useJUnitPlatform()
    
    systemProperty 'testJars.location', testsJar.archiveFile.get().asFile
    
    jvmArgs(
            '--module-path', classpath.asPath,
            '--add-modules', 'ALL-MODULE-PATH',
            '--add-opens', 'cpw.mods.modlauncher/cpw.mods.modlauncher=powermock.reflect',
            '--add-opens', 'java.base/java.lang=powermock.reflect',
            '--add-opens', 'cpw.mods.securejarhandler/cpw.mods.cl=powermock.reflect',
            '--add-opens', 'java.base/java.lang.invoke=cpw.mods.securejarhandler',
            '--add-reads', 'cpw.mods.modlauncher=cpw.mods.modlauncher.test'
    )
}

task jmh(type: JavaExec, dependsOn: jmhClasses) {
    mainClass = 'org.openjdk.jmh.Main'

    def results = file("${project.reportsDir}/jmh/result.json")
    doFirst {
        results.parentFile.mkdirs()
        jvmArgs(
                '--module-path', sourceSets.jmh.runtimeClasspath.asPath,
                '--add-modules', 'ALL-MODULE-PATH',
                '--add-opens', 'cpw.mods.modlauncher/cpw.mods.modlauncher=powermock.reflect',
                '--add-opens', 'cpw.mods.modlauncher/cpw.mods.modlauncher=cpw.mods.modlauncher.benchmarks',
                '--add-exports', 'cpw.mods.modlauncher.benchmarks/cpw.mods.modlauncher.benchmarks.jmh_generated=jmh.core'
        )
    }

    args = [
            'cpw.mods.modlauncher.benchmarks.TransformBenchmark',
            '-bm', 'avgt',
            '-prof', 'stack',
            '-prof', 'jfr',
            '-r', '3s',
            '-w', '3s',
            '-wi', '3',
            '-i', '3',
            '-f', '3',
            '-tu', 'us',
            '-rf', 'json',
            '-rff', results
    ]
}

jar {
    manifest {
		attributes(['Specification-Title': 'modlauncher',
			'Specification-Vendor': 'forge',
			'Specification-Version': gradleutils.gitInfo.tag,
			'Implementation-Title': project.name,
			'Implementation-Version': project.version,
			'Implementation-Vendor' :'forge'
		]  as LinkedHashMap, 'cpw/mods/modlauncher/api/')
		
		attributes(['Specification-Title': 'modlauncherserviceapi',
			'Specification-Vendor': 'forge',
			'Specification-Version': gradleutils.gitInfo.tag,
			"Implementation-Title": project.name,
			'Implementation-Version': project.version,
			'Implementation-Vendor' :'forge'
		]  as LinkedHashMap, 'cpw/mods/modlauncher/serviceapi/')
	}
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked'
}

compileJava {
    options.javaModuleVersion = project.version.toString()
    options.javaModuleMainClass = 'cpw.mods.modlauncher.Launcher'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Mod Launcher'
                description = 'Common ModLauncher framework'
                url = 'https://github.com/MinecraftForge/modlauncher'
			}
        }
    }
    repositories {
        maven gradleutils.getPublishingForgeMaven()
    }
}
